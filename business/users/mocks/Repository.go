// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	users "messaging/business/users"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: user
func (_m *Repository) CreateUser(user *users.Users) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.Users) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: user
func (_m *Repository) Delete(user *users.Users) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.Users) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: username
func (_m *Repository) Get(username string) (*users.Users, error) {
	ret := _m.Called(username)

	var r0 *users.Users
	if rf, ok := ret.Get(0).(func(string) *users.Users); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: id_user
func (_m *Repository) GetUserById(id_user int) (*users.Users, error) {
	ret := _m.Called(id_user)

	var r0 *users.Users
	if rf, ok := ret.Get(0).(func(int) *users.Users); ok {
		r0 = rf(id_user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id_user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: username, password
func (_m *Repository) Login(username string, password string) (*users.Users, error) {
	ret := _m.Called(username, password)

	var r0 *users.Users
	if rf, ok := ret.Get(0).(func(string, string) *users.Users); ok {
		r0 = rf(username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *Repository) Update(user *users.Users) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*users.Users) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
