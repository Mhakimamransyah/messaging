// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	chats "messaging/business/chats"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CountUnread provides a mock function with given fields: id_users, id_group
func (_m *Repository) CountUnread(id_users int, id_group int) int {
	ret := _m.Called(id_users, id_group)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(id_users, id_group)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// CreateChats provides a mock function with given fields: _a0
func (_m *Repository) CreateChats(_a0 *chats.Chats) (error, interface{}) {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*chats.Chats) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	var r1 interface{}
	if rf, ok := ret.Get(1).(func(*chats.Chats) interface{}); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(interface{})
		}
	}

	return r0, r1
}

// GetChatDetail provides a mock function with given fields: id_users, id_group
func (_m *Repository) GetChatDetail(id_users int, id_group int) ([]*chats.Chats, error) {
	ret := _m.Called(id_users, id_group)

	var r0 []*chats.Chats
	if rf, ok := ret.Get(0).(func(int, int) []*chats.Chats); ok {
		r0 = rf(id_users, id_group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chats.Chats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id_users, id_group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatsGroup provides a mock function with given fields: id_user
func (_m *Repository) GetChatsGroup(id_user int) ([]*chats.Chats, error) {
	ret := _m.Called(id_user)

	var r0 []*chats.Chats
	if rf, ok := ret.Get(0).(func(int) []*chats.Chats); ok {
		r0 = rf(id_user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*chats.Chats)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id_user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRead provides a mock function with given fields: id_users, id_group
func (_m *Repository) UpdateRead(id_users int, id_group int) error {
	ret := _m.Called(id_users, id_group)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id_users, id_group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
